<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Info"
      internalLogFile="c:\temp\internal-nlog.txt">
  <!--autoReload 自动重新加载-->
  <!--throwExceptions 抛出异常-->
  <!--throwConfigExceptions="true" NLog 在配置文件错误的情况下抛出异常-->
  <!--在根节点（nlog）配置 internalLogLevel, internalLogFile，可以查看NLog输出日志时的内部信息，比如你配置文件有错误，很有帮助，不过项目发布后还是关闭比较好，以免影响效率；-->
  
  <!-- enable asp.net core layout renderers -->
  <extensions>
    <add assembly="NLog.Web.AspNetCore"/>
  </extensions>
  
  <targets>
    <!--target参数里有些是NLog内置参数，比如message,level,date,longdate,exception,stacktrace(消息，级别，日期，长日期，异常，堆栈跟踪)等，NLog在输出时会自动赋值；-->

    <!--xsi:type="AsyncWrapper" 表示这条 target 将异步输出-->
    <!--queueLimit="5000" 队列限制5000-->
    <!--overflowAction="Discard" 这个不知道干啥的(⊙_⊙)？猜测是上面队列超过5000之后的就丢弃-->
    <!--layout 设置每条日志的布局,可参考官方说明 https://nlog-project.org/config/?tab=layout-renderers -->

    <!-- 1.将日志写入文件-->
    <target name="Hello_File" xsi:type="AsyncWrapper" queueLimit="5000" overflowAction="Discard">
      <target xsi:type="File" fileName="${currentdir}/logs/Hello_${shortdate}_${processid}_${threadid}.log" layout="${date}_${processid}_${threadid} ${level:uppercase=true} ${event-context:item=Action} ${message} ${event-context:item=Amount} ${stacktrace}" />
    </target>

    <target name="Hi_File" xsi:type="AsyncWrapper" queueLimit="5000" overflowAction="Discard">
      <target xsi:type="File" fileName="${currentdir}/logs/Hi_${shortdate}_${processid}_${threadid}.log" layout="${date}_${processid}_${threadid} ${level:uppercase=true} ${event-context:item=Action} ${message} ${event-context:item=Amount} ${stacktrace}" />
    </target>

    <!--<target name="Hello_File" xsi:type="AsyncWrapper" queueLimit="5000" overflowAction="Discard">
      <target xsi:type="File" fileName="c:\temp\nlog-all-${shortdate}.log"
              layout="${longdate}|${event-properties:item=EventId_Id}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}" />      
    </target>

    <target name="Hi_File" xsi:type="AsyncWrapper" queueLimit="5000" overflowAction="Discard">
      <target xsi:type="File" fileName="c:\temp\nlog-own-${shortdate}.log"
              layout="${longdate}|${event-properties:item=EventId_Id}|${uppercase:${level}}|${logger}|${message} ${exception:format=tostring}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}" />
    </target>-->

    <!-- 2.将日志消息写入Visual Studio输出--><!--
    <target name="debugger" xsi:type="Debugger" layout="NLog: ${date:format=yyyy-MM-dd HH\:mm\:ss} | ${level:uppercase=true:padding=-5} | ${message}" />

    --><!-- 3.将日志消息写入控制台输出--><!--
    <target name="console" xsi:type="Console" layo-->ut="NLog: ${date:format=yyyy-MM-dd HH\:mm\:ss} | ${level:uppercase=true:padding=-5} | ${message}"/>

  </targets>

  <rules>
    <!--在rules节点，指定四个target输出日志的级别-->
    <!--TRACE,DEBUG,INFO,WARN,ERROR,FATAL /(小级别) 跟踪、调试、信息、警告、错误、致命 (大级别) -->
    <!--name - 日志源/记录者的名字 (允许使用通配符*) C#调用的时候 LogManager.GetLogger("这里就是name值")
        minlevel - 该规则所匹配日志范围的最小级别
        maxlevel - 该规则所匹配日志范围的最大级别
        level - 该规则所匹配的单一日志级别
        levels - 该规则所匹配的一系列日志级别，由逗号分隔。
        writeTo - 规则匹配时日志应该被写入的一系列目标，由逗号分隔。
        final - 标记当前规则为最后一个规则。其后的规则即时匹配也不会被运行。-->

    <logger name="rlf" minlevel="Trace" writeTo="Hello_File" />
    <logger name="Hi_Nlog" minlevel="Trace" writeTo="Hi_File" />
    <!--<logger name="*" minlevel="Trace" writeTo="debugger,console" />-->

  </rules>
</nlog>
